/**
 * @file SequelizeModels
 * @author Jim Bulkowski <jim.b@paperelectron.com>
 * @project sequelize-core
 * @license MIT {@link http://opensource.org/licenses/MIT}
 */

import {CreatePlugin} from "@pomegranate/plugin-tools";
import {get, isFunction,map, reduce, capitalize, toLower} from 'lodash/fp'
const tsGenerator = `// Generated by the Pomegranate cli on {{creationDate}}

// name: {{name}}'

export const Endpoint = (Axios, Env) => {
  return Axios.create({
    baseURL: 'http://localhost:8080'
  })
}

`

class FluentAxios {

  constructor(private endpointMap: Map<string, any>){

  }
  use(prop: string){
    if(this.endpointMap.has(prop)){
      return this.endpointMap.get(prop)
    }
    throw new Error(`Endpoints Map does not contain an item with the key of ${prop}`)
  }
}

export const AxiosEndpoints = CreatePlugin('anything')
  .directories([{prop: 'main', path: '.'}])
  .configuration({
    name: 'Endpoints',
    injectableParam: 'Endpoints'
  })
  .hooks({
    load: async (Injector,PluginVariables, PluginFiles, PluginLogger) => {
      let files = await PluginFiles('main').fileList({ext: '.js'})
      let endpoints = map(async (file) => {
        let required = require(file.path)
        let fileName = file.getBaseName()

        PluginLogger.log(`Found Endpoint: ${fileName}.`, 2)

        let M = get('Endpoint', required)
        if (!M) {
          throw new Error(`Endpoint file ${fileName} does not contain an export on the Endpoint property.`)
        }
        if (!isFunction(M)) {
          throw new Error(`Endpoint file ${fileName} does not export an injectable function on the Endpoint property.`)
        }
        let injectedFun = await Injector.inject(M)
        return [fileName, injectedFun]
      }, files)

      let resolvedEndpoints = await Promise.all(endpoints)

      let constructedMap = reduce((acc, [name, item]) => {
        acc.set(name, item)
        return acc
      }, new Map<string, any>(), resolvedEndpoints)

      return new FluentAxios(constructedMap)
    }
  })
  .commands(function (PomConfig, PluginFiles, Handlebars) {
    return (yargs) => {
      return yargs
        .usage('usage: $0')
        .command({
          command: 'generate <name>',
          aliases: 'g',
          describe: `Generates Endpoint file <name>`,
          builder: (yargs) => {
            return yargs
              .positional('name', {
                describe: 'The the filename to be created.',
                default: 'index',
                type: 'string'
              })
              .option('l', {
                alias: 'language',
                describe: 'Generate TypeScript or Javascript',
                default: 'ts',
                choices: ['ts'],
                type: 'string'
              })
              .option('force', {
                alias: 'f',
                default: false,
                describe: 'overwrites the specified file if it exists.',
                type: 'boolean'
              })
          },
          handler: async (argv) => {
            let Pf = PluginFiles('main')
            let file = `${argv.name}.${argv.language}`
            let exists = await Pf.projectFileExists(file)
            let compile = Handlebars.compile(tsGenerator)
            let upperName = argv.name
            let lowerName = toLower(argv.name)
            let compiled = compile({
              creationDate: new Date().toDateString(),
              name: argv.name,
              upperName,
              lowerName
            })

            if (exists && !argv.force) {
              throw new Error(`${file} \n exists \n Rerun with --force to overwrite.`)
            }
            await Pf.outputProjectFile(file, compiled)
            console.log(`Created @pomofficial/Axios Endpoint file ${file}`)
          }
        })
        .help()
    }
  })